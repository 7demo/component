#!/usr/bin/env node

var archy = require('archy');
var chalk = require('chalk');
var Component = require('..');
var program = require('commander');
var logger = require('../lib/logger');
var normalize = require('../lib/spec').normalize;

/**
 * Options.
 */

program
  .option('-d, --depth <n>', 'set the depth to <n>', Infinity)
  .option('-D, --dev', 'whether to output development dependencies')
  .parse(process.argv);

/**
 * Padding.
 */

console.log();
process.on('exit', function(){ console.log(); });

/**
 * Component.
 */

try {
  var component = new Component(process.cwd());
} catch(e) {
  logger.fatal(e);
}

/**
 * Log a tree for the component's dependencies.
 */

component.localDependencies(function(err, installed){
  if (err) logger.fatal(err);

  var tree = walk(component.json());
  console.log(indent(archy(tree), 2));

  /**
   * Walk the dependencies of a `conf` and print our their versions.
   *
   * @param {Object} conf
   * @param {String} peg
   * @param {Number} depth (optional)
   */

  function walk(conf, peg, depth){
    depth = depth || 0;
    var ret = {};
    var repo = conf.repository;
    var deps = conf.dependencies;

    ret.label = depth
      ? repo + ' ' + chalk.green(installed[repo].version) + ' ' + chalk.gray(peg)
      : chalk.cyan(conf.name);

    if (depth++ > program.depth) return ret;

    ret.nodes = Object.keys(deps).map(function(repo){
      var peg = deps[repo];
      return installed[repo]
        ? walk(installed[repo].conf, peg, depth)
        : repo + ' ' + chalk.red('not installed') + ' ' + chalk.gray(peg);
    });

    return ret;
  }
});

/**
 * Indent a `string` by `n` spaces.
 *
 * @param {String} string
 * @param {Number} n
 */

function indent(string, n) {
  return string.replace(/^/gm, new Array(n + 1).join(' '));
}