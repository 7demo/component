#!/usr/bin/env node

/**
 * Module dependencies.
 */

var program = require('commander');
var component = require('..');
var Installer = require('component-installer');
var fs = require('fs');
var exists = fs.existsSync;
var write = fs.writeFileSync;
var utils = component.utils;
var log = utils.log;
var error = utils.error;
var fatal = utils.fatal;
var url = require('url');
var path = require('path');
var resolve = path.resolve;
var resolver = require('component-resolver');

/**
 * Options.
 */

program
  .usage('[name ...]')
  .option('-d, --dev', 'install development dependencies')
  // .option('-r, --remotes <urls>', 'remotes to try installing from')
  // .option('-f, --force', 'force installation even if previously installed')
  .option('-p, --proxy <proxy>', 'use a proxy, eg. http://localhost:3128')
  .option('-v, --verbose', 'verbose output')
  .parse(process.argv);

/**
 * Examples.
 */

program.on('--help', function(){
  console.log('  Examples:');
  console.log();
  console.log('    # install deps in ./component.json');
  console.log('    $ component install');
  console.log();
  console.log('    # install a single component');
  console.log('    $ component install component/tip');
  console.log();
  console.log('    # install several components');
  console.log('    $ component install component/tip component/popover');
  console.log();
  console.log('    # shell brace expansion ftw');
  console.log('    $ component install component/{tip,popover,dialog}');
  console.log();
  console.log('    # install a specific tag / sha');
  console.log('    $ component install component/tip@8bf1ffc3f');
  console.log();
  console.log('    # install regular & development deps in .');
  console.log('    $ component install -d');
  console.log();
});

/**
 * Install.
 */

var options = {
  development: program.dev,
  proxy: program.proxy,
  verbose: true,
  install: true,
};

var local = !program.args.length;
if (local) {
  resolver(process.cwd(), options, function(err) {
    if (err) utils.fatal(err.message);
  })
} else {
  var deps = {};
  program.args.forEach(function(pkg) {
    var parts = pkg.split('@');
    var name = parts[0];
    var version = parts[1];
    deps[name] = version || '*';
  });
  resolver({
    dependencies: deps
  }, options, function(err) {
    if (err) utils.fatal(err.message);
    var json;
    var filename = resolve('component.json');
    try {
      json = require(filename);
    } catch (err) {
      json = {};
    }
    Object.keys(deps).forEach(function (name) {
      json.dependencies = json.dependencies || {};
      json.dependencies[name] = deps[name];
    });
    fs.writeFileSync(filename, JSON.stringify(json, null, 2));
  })
}
