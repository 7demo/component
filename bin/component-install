#!/usr/bin/env node

/**
 * Module dependencies.
 */

var program = require('commander')
  , component = require('..')
  , utils = component.utils
  , log = utils.log
  , path = require('path');

// options

program
  .usage('[pkg ...]')
  .option('-d, --dev', 'install development dependencies')
  .option('-o, --out <dir>', 'output components to the given <dir>')
  .option('-f, --force', 'force installation even if previously installed')

// examples

program.on('--help', function(){
  console.log('  Examples:');
  console.log();
  console.log('    # install deps in ./component.json');
  console.log('    $ component install');
  console.log();
  console.log('    # install a single component');
  console.log('    $ component install component/tip');
  console.log();
  console.log('    # install several components');
  console.log('    $ component install component/tip component/popover');
  console.log();
  console.log('    # shell brace expansion ftw');
  console.log('    $ component install component/{tip,popover,dialog}');
  console.log();
  console.log('    # install a specific tag / sha');
  console.log('    $ component install component/tip@8bf1ffc3f');
  console.log();
  console.log('    # install regular & development deps in .');
  console.log('    $ component install -d');
  console.log();
});

// parse argv

program.parse(process.argv);

// pkgs

var pkgs = program.args;

// install from ./component.json

if (!pkgs.length) {
  var conf = require(path.resolve('component.json'));

  if (conf.dependencies) {
    pkgs = normalize(conf.dependencies);
  }

  if (conf.development && program.dev) {
    pkgs = pkgs.concat(normalize(conf.development));
  }
}

// install

console.log();
pkgs.forEach(function(pkg){
  var parts = pkg.split('@');
  pkg = parts.shift();
  var version = parts.shift() || 'master';
  pkg = component.install(pkg, version, {
    dest: program.out,
    force: program.force,
    dev: program.dev
  });
  report(pkg);
  pkg.install();
});

// map deps to args

function normalize(deps) {
  return Object.keys(deps).map(function(name){
    return name + '@' + deps[name];
  });
}

// reporter

function report(pkg) {
  log('install', pkg.name + '@' + pkg.version);

  pkg.on('error', function(err){
    log('error', err.message);
    process.exit(1);
  });

  pkg.on('dep', function(dep){
    log('dep', dep.name + '@' + dep.version);
    report(dep);
  });

  pkg.on('exists', function(dep){
    log('exists', dep.name + '@' + dep.version);
  });

  pkg.on('file', function(file){
    log('fetch', pkg.name + ':' + file);
  });

  pkg.on('end', function(){
    log('complete', pkg.name);
  });
}

// padding

process.on('exit', function(){
  console.log();
});
