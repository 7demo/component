#!/usr/bin/env node

var program = require('commander');
var Component = require('..');
var fs = require('fs');
var path = require('path');
var semver = require('semver');
var logger = Component.utils.logger;

/**
 * Options.
 */

program
  .usage('[package ...]')
  .option('-d, --dev', 'install development dependencies alongside regular ones')
  .option('-o, --out <dir>', 'set the destination directory to install dependencies')
  .option('-v, --verbose', 'output verbose logging while installing')
  .parse(process.argv);

/**
 * Examples.
 */

program.on('--help', function(){
  console.log('  Examples:');
  console.log();
  console.log('    # install dependencies from ./component.json');
  console.log('    $ component install');
  console.log();
  console.log('    # install a single component as a dependency');
  console.log('    $ component install component/tip');
  console.log();
  console.log('    # install several components at once');
  console.log('    $ component install component/tip component/popover');
  console.log();
  console.log('    # install a specific version of a component');
  console.log('    $ component install component/tip@1.0.0');
  console.log();
  console.log('    # install regular and development dependencies from ./component.json');
  console.log('    $ component install --dev');
  console.log();
  console.log('    # install a single component as a development dependency');
  console.log('    $ component install --dev component/tip');
  console.log();
  process.exit();
});

/**
 * Padding.
 */

console.log();
process.on('exit', function(){ console.log(); });

/**
 * Settings.
 */

var packages = program.args;
var dev = program.dev;
var out = program.out;
var verbose = program.verbose;

/**
 * Component.
 */

try {
  var component = new Component(process.cwd());
} catch (e) {
  logger.fatal(e);
}

if (dev) component.development();
if (out) component.installTo(out);

/**
 * Without dependencies, install everything from the component.json in the
 * current working directory.
 */

if (!packages) {
  return listen(component.install(function(err){
    if (err) logger.fatal(err);
  }));
}

/**
 * Install each dependency in the list of `packages`, and save them to the
 * component.json in the current directory.
 */

component.installed(function(err, installed){
  if (err) logger.fatal(err);

  var unpinned = [];
  var repos = [];
  var json = component.json;
  var deps = dev
    ? (json.development = json.development || {})
    : (json.dependencies = json.dependencies || {});

  packages.forEach(function(pkg){
    var parts = pkg.split('@');
    var repo = parts[0].toLowerCase();
    var version = parts[1];
    if (!~repo.indexOf('/')) return logger.fatal('Invalid component name "' + pkg + '".');
    repos.push(repo);

    // the only case when we don't want to update the version is if the package
    // was already installed and a new version wasn't supplied
    if (version) {
      deps[repo] = version;
    } else if (!installed[repo]) {
      deps[repo] = '*';
      unpinned.push(repo);
    }
  });

  var emitter = component.install(function(err){
    if (err) logger.fatal(err);
    component.save(json, function(err){
      if (err) logger.fatal(err)
    });
  });

  listen(emitter, repos);

  // when the download completes, if the package was unpinned, check the final
  // version that was resolved and pin it with "~"
  emitter.on('download', function(repo, version){
    if (~unpinned.indexOf(repo)) deps[repo] = '~' + version;
  });
});

/**
 * Attach listeners to the install steps, optionally filtering by `repos`.
 *
 * @param {Emitter} emitter
 * @param {Array} repos (optional)
 */

function listen(emitter, repos){
  emitter.on('download', function(repo, version){
    if (match(repo)) logger.log('installed', repo + '@' + version);
  });

  emitter.on('exists', function(repo, version){
    if (match(repo)) logger.log('exists', repo + '@' + version);
  });

  if (!verbose) return;

  emitter.on('versions', function(repo){
    if (match(repo)) logger.log('versions', repo);
  });

  emitter.on('downloading', function(repo, version){
    if (match(repo)) logger.log('fetch', repo + '@' + version);
  });

  function match(repo){
    return !! repos && ~repos.indexOf(repo);
  }
}