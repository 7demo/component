#!/usr/bin/env node

/**
 * Module dependencies.
 */

var program = require('commander');
var spawn = require('win-fork');
var path = require('path');
var fs = require('fs');
var join = path.join;
var stat = fs.statSync;
var exists = fs.existsSync;
var resolve = path.resolve;

// usage

program
  .version(require('../package').version)
  .usage('<command> [options]');

// sub-command help

program.on('--help', function(){
  console.log('  Commands:');
  console.log();
  console.log('    build                   build the component');
  console.log('    crawl                   crawl a github user/organization for components');
  console.log('    duplicates              check for multiple versions of dependencies');
  console.log('    install [name ...]      install one or more components');
  console.log('    ls                      list installed components');
  console.log('    open                    open a repo\'s github page');
  console.log('    pin                     pin ranged dependencies to the highest installed, compatible version');
  console.log('    search [query]          search with the given query');
  console.log('    update                  update pinned depedencies to the highest available version')
  console.log('    validate                validate component.json\'s for specifications compliance');
  console.log();
  console.log('  For more help, go to the Component Guide at https://github.com/component/guide. Quickly access this page by executing `component open guide`.');
  console.log();
  console.log('  If you\'re having issues with Component, try running commands with `DEBUG=component*`. For example, `DEBUG=component* component install`.');
  console.log();
  process.exit();
});

// parse argv

program.parse(process.argv);

// args void of cmd

var args = process.argv.slice(3);

// command

var cmd = program.args[0];

// alias "install" as "add"

if ('add' == cmd) cmd = 'install';

// display help

if (!cmd) program.help();

// executable

var bin = 'component-' + cmd;

// local or resolve to absolute executable path

var local = join(__dirname, bin);

if (exists(local)) {
  bin = local;
} else {
  bin = process.env.PATH.split(':').reduce(function(binary, p) {
    p = resolve(p, bin);
    return exists(p) && stat(p).isFile() ? p : binary;
  }, bin);
}

// display help if bin does not exist

if (!exists(bin)) {
  console.error('\n  %s(1) does not exist', bin);
  program.help();
}

// spawn

var proc = spawn(bin, args, { stdio: 'inherit', customFds: [0, 1, 2] });

proc.on('close', function(code){
  process.exit(code);
});
