#!/usr/bin/env node

var program = require('commander');
var spawn = require('win-fork');
var path = require('path');
var fs = require('fs');

var join = path.join;
var stat = fs.statSync;
var exists = fs.existsSync;
var resolve = path.resolve;

/**
 * Usage.
 */

program
  .version(require('../package').version)
  .usage('<command> [options]');

/**
 * Help.
 */

program.on('--help', function(){
  console.log('  Commands:');
  console.log();
  console.log('    build                   build the component');
  console.log('    crawl                   crawl a github user/organization for components');
  console.log('    install [name ...]      install and save one or more components');
  console.log('    ls                      list installed components');
  console.log('    open                    open a repo\'s github page');
  console.log('    search [query]          search with the given query');
  console.log();
  console.log('  For more help, run `component open -h` for relevant links.');
  console.log('  You may also `component open help <command>` to open the relevant documentation in your favorite browser.')
  console.log();
  process.exit();
});

/**
 * Parse.
 */

program.parse(process.argv);
if (!program.args.length) program.help();

/**
 * Settings.
 */

var cmd = normalize(program.args[0]);
var args = program.args.slice(1);
var bin = 'component-' + cmd;
var local = join(__dirname, bin);

/**
 * Use the local, built-in commands or resolve to an absolute path.
 */

if (exists(local)) {
  bin = local;
} else {
  bin = process.env.PATH.split(':').reduce(function(binary, p) {
    p = resolve(p, bin);
    return exists(p) && stat(p).isFile() ? p : binary;
  }, bin);
}

/**
 * Help if the bin doesn't exist.
 */

if (!exists(bin)) {
  console.error();
  console.error('  %s(1) does not exist', bin);
  console.error();
  program.help();
}

/**
 * Spawn.
 */

var proc = spawn(bin, args, {
  stdio: 'inherit',
  customFds: [0, 1, 2]
});

proc.on('close', function(code){
  process.exit(code);
});

/**
 * Normalize a `cmd` against aliases.
 *
 * @param {String} cmd
 * @return {String}
 */

function normalize(cmd){
  switch (cmd) {
    case 'add':
    case 'i':
      return 'install';
    default:
      return cmd;
  }
}