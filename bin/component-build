#!/usr/bin/env node

var Component = require('..');
var join = require('path').join;
var logger = require('../lib/logger');
var mkdir = require('mkdirp').sync;
var program = require('commander');
var write = require('fs').writeFileSync;

/**
 * Options.
 */

program
  .usage('component build')
  .option('-o, --out <dir>', 'output directory, defaulting to ./build', 'build')
  .option('-i, --in <file>', 'input directory, defaulting to ./', 'components')
  .option('-n, --name <file>', 'base name for build files, defaulting to "build"', 'build')
  .option('-d, --dev', 'build development dependencies and enable source maps')
  .option('-s, --standalone <name>', 'build a standalone version of the component with the given global name')
  .option('-p, --prefix <str>', 'prefix css asset urls with <str>', '')
  .option('-c, --copy', 'copy files instead of linking');

/**
 * Help.
 */

program.on('--help', function(){
  console.log('  Examples:');
  console.log();
  console.log('    # build to ./build');
  console.log('    $ component build');
  console.log();
  console.log('    # build to ./dist as assets.js, assets.css');
  console.log('    $ component build --out dist --name assets');
  console.log();
  console.log('    # build a standalone version using `$` as the global variable');
  console.log('    $ component build --standalone $');
  console.log();
  process.exit();
});

/**
 * Parse.
 */

program.parse(process.argv);

/**
 * Settings.
 */

var copy = program.copy;
var dev = program.dev;
var name = program.name;
var components = program.in;
var out = program.out;
var prefix = program.prefix;
var standalone = program.standalone;

/**
 * Component.
 */

try {
  var component = new Component(process.cwd());
} catch (e) {
  logger.fatal(e);
}

if (components) component.installTo(components);
if (out) component.buildTo(out);
if (dev) component.development(true);
if (copy) component.symlink(false);

/**
 * Build.
 */

component.build(function(err, res){
  if (err) return logger.fatal(err);
  mkdir(out);
  write(join(out, name + '.js'), res.require + res.js);
  write(join(out, name + '.css'), res.css);
});
