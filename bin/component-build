#!/usr/bin/env node

/**
 * Module dependencies.
 */

var resolve = require('component-resolver');
var utils = require('component-consoler');
var Build = require('component-build');
var program = require('commander');
var mkdir = require('mkdirp');
var path = require('path');
var fs = require('fs');

var exists = fs.existsSync || path.existsSync;
var log = utils.log;

// options

program
  .usage('component build [scripts] [styles] [files]')
  .option('-o, --out <dir>', 'output directory defaulting to ./build', 'build')
  .option('-n, --name <file>', 'base name for build files defaulting to build', 'build')
  .option('-d, --dev', 'build development dependencies')
  .option('-s, --standalone <name>', 'build a standalone, UMD-wrapped version of the component with the given global name')
  .option('-R, --no-require', 'exclude require from build')
  .option('-p, --prefix <str>', 'prefix css asset urls with <str>', '')
  .option('-b, --browsers <string>', 'browsers to support with autoprefixer')
  .option('-c, --copy', 'copy files instead of linking')
  .option('--umd', 'alias for --standalone')

// examples

program.on('--help', function(){
  console.log('  Examples:');
  console.log();
  console.log('    # build to ./build');
  console.log('    $ component build');
  console.log();
  console.log('    # build to ./dist as assets.js, assets.css');
  console.log('    $ component build -o dist -n assets');
  console.log();
  console.log('    # build as UMD defaulting to window.$');
  console.log('    $ component build --umd $');
  console.log();
  console.log('    # build only .js');
  console.log('    $ component build scripts');
  console.log();
});

// parse argv

program.parse(process.argv);

var args = program.args;

// object of which files to build
var builds;
if (!args.length) {
  builds = {
    scripts: true,
    styles: true,
    files: true,
  };
} else {
  builds = {
    scripts: !!~args.indexOf('scripts')
      || !!~args.indexOf('js'),
    styles: !!~args.indexOf('styles')
      || !!~args.indexOf('css'),
    files: !!~args.indexOf('files'),
  };
}

// component.json required

if (!exists('component.json')) utils.fatal('missing component.json');

// output paths

var jsPath = path.join(program.out, program.name + '.js');
var cssPath = path.join(program.out, program.name + '.css');

// mkdir -p

mkdir.sync(program.out);

// resolve

var start = Date.now();

resolve(process.cwd(), {
  development: program.dev,
  install: true,
  verbose: true,
}, function (err, tree) {
  if (err) utils.fatal(err);

  var now = Date.now();
  log('build', 'resolved in ' + (now - start) + 'ms');
  start = now;

  var build = Build(tree);
  build.set('development', program.dev);
  build.set('require', program.require);
  build.set('umd', program.standalone || program.umd || '');
  build.set('prefix', program.prefix || '');
  build.set('browsers', program.browsers || '');

  if (builds.scripts) {
    build.scripts(function (err, js) {
      if (err) utils.fatal(err);
      if (!js) return;
      fs.writeFile(jsPath, js);
      log('build', jsPath + ' in '
        + (Date.now() - start) + 'ms - '
        + (js.length / 1024 | 0) + 'kb');
    })
  }

  if (builds.styles) {
    build.styles(function (err, css) {
      if (err) utils.fatal(err);
      if (!css) return;
      fs.writeFile(cssPath, css);
      log('build', cssPath + ' in '
        + (Date.now() - start) + 'ms - '
        + (css.length / 1024 | 0) + 'kb');
    })
  }

  if (builds.files) {
    build.files(function (err) {
      if (err) utils.fatal(err);
      log('build', 'files in ' + (Date.now() - start) + 'ms');
    })
  }
})
