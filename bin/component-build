#!/usr/bin/env node

/**
 * Module dependencies.
 */

var resolve = require('component-resolver');
var build = require('component-builder2');
var utils = require('component-consoler');
var program = require('commander');
var mkdir = require('mkdirp');
var path = require('path');
var fs = require('fs');

var exists = fs.existsSync || path.existsSync;
var log = utils.log;

// options

program
  .usage('component build [scripts] [styles] [files]')
  .option('-o, --out <dir>', 'output directory defaulting to ./build', 'build')
  .option('-n, --name <file>', 'base name for build files defaulting to build', 'build')
  .option('-d, --dev', 'build development dependencies')
  .option('-s, --umd <name>', 'build a stand-alone version of the component')
  .option('-R, --no-require', 'exclude require from build')
  .option('-p, --prefix <str>', 'prefix css asset urls with <str>', '')
  .option('-c, --copy', 'copy files instead of linking')

// examples

program.on('--help', function(){
  console.log('  Examples:');
  console.log();
  console.log('    # build to ./build');
  console.log('    $ component build');
  console.log();
  console.log('    # build to ./dist as assets.js, assets.css');
  console.log('    $ component build -o dist -n assets');
  console.log();
  console.log('    # build as UMD defaulting to window.$');
  console.log('    $ component build --umd $');
  console.log();
  console.log('    # build only .js');
  console.log('    $ component build scripts');
  console.log();
});

// parse argv

program.parse(process.argv);

var args = program.args;

// object of which files to build
var builds;
if (!args.length) {
  builds = {
    scripts: true,
    styles: true,
    files: true,
  };
} else {
  builds = {
    scripts: !!~args.indexOf('scripts')
      || !!~args.indexOf('js'),
    styles: !!~args.indexOf('styles')
      || !!~args.indexOf('css'),
    files: !!~args.indexOf('files'),
  };
}

// component.json required

if (!exists('component.json')) utils.fatal('missing component.json');

// standalone name

var standalone = program.umd;

// output paths

var jsPath = path.join(program.out, program.name + '.js');
var cssPath = path.join(program.out, program.name + '.css');

// mkdir -p

mkdir.sync(program.out);

// resolve

var start = Date.now();

resolve(process.cwd(), {
  development: program.dev,
  install: true,
  verbose: true,
}, function (err, tree) {
  if (err) utils.fatal(err);

  var now = Date.now();
  log('build', 'resolved in ' + (now - start) + 'ms');
  start = now;

  if (builds.scripts) {
    build.scripts(tree, {
      development: program.dev,
      require: false,
    })
    .use('scripts',
      build.plugins.es6modules(),
      build.plugins.js())
    .use('json',
      build.plugins.json())
    .use('templates',
      build.plugins.string())
    .end(function (err, js) {
      if (err) utils.fatal(err);
      if (!js) return;

      var canonical = tree.canonical;

      if (standalone) {
        var name = typeof standalone === 'string'
          ? name
          : canonical;

        js = '(function(){\n\n'
          + build.scripts.require
          + js
          + 'if (typeof exports == "object") {',
          + '  module.exports = require("' + canonical + '");',
          + '} else if (typeof define == "function" && define.amd) {',
          +'  define([], function(){ return require("' + canonical + '"); });',
          + '} else {',
          + '  this["' + name + '"] = require("' + canonical + '");',
          + '}'
          + '})()';
      } else {
        if (program.require) js = build.scripts.require + js;
        js += 'require("' + canonical + '")\n';
      }

      fs.writeFile(jsPath, js);
      log('build', jsPath + ' in ' + (Date.now() - start) + 'ms');
      log('js', (js.length / 1024 | 0) + 'kb');
    })
  }

  if (builds.styles) {
    build.styles(tree, {
      development: program.dev,
    })
    .use('styles', build.plugins.urlRewriter(program.prefix || ''))
    .end(function (err, css) {
      if (err) utils.fatal(err);
      if (!css) return;

      fs.writeFile(cssPath, css);
      log('build', cssPath + ' in ' + (Date.now() - start) + 'ms');
      log('jcss', (css.length / 1024 | 0) + 'kb');
    })
  }

  if (builds.files) {
    var filePlugin = program.copy
      ? build.plugins.copy()
      : build.plugins.symlink();
    build.styles(tree, {
      development: program.dev,
    })
    .use('images', filePlugin)
    .use('fonts', filePlugin)
    .use('files', filePlugin)
    .end(function (err) {
      if (err) utils.fatal(err);

      log('build', 'files in ' + (Date.now() - start) + 'ms');
    })
  }
})
