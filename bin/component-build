#!/usr/bin/env node

/**
 * Module dependencies.
 */

var program = require('commander')
  , Builder = require('component-builder')
  , component = require('..')
  , utils = component.utils
  , log = component.utils.log
  , path = require('path')
  , fs = require('fs')
  , mkdir = require('mkdirp');

// options

program
  .option('-o, --out <dir>', 'output directory defaulting to ./build', 'build')
  .option('-v, --verbose', 'output verbose build information')

// parse argv

program.parse(process.argv);

// load json

var conf = require(path.resolve('component.json'));

// mkdir -p

mkdir.sync(program.out);

// output streams

var js = fs.createWriteStream(path.join(program.out, 'build.js'));
var css = fs.createWriteStream(path.join(program.out, 'build.css'));

// build

Object.keys(conf.dependencies).forEach(function(name){
  if (!component.exists(name)) utils.fatal(name + ' is not installed, run `component install`');
  name = name.replace('/', '-');
  var dir = path.join('components', name);
  var builder = new Builder(dir);
  if (program.verbose) log('build', name);
  builder.build(function(err, obj){
    if (err) utils.fatal(err.message);
    if (program.verbose) log('write', name + ' ' + (obj.js.length / 1024 | 0) + 'kb of js');
    if (program.verbose) log('write', name + ' ' + (obj.css.length / 1024 | 0) + 'kb of css');
    js.write(obj.js);
    css.write(obj.css);
  });
});
