#!/usr/bin/env node

/**
 * Module dependencies.
 */

var program = require('commander');
var resolver = require('component-resolver');
var flatten = require('component-flatten');
var Builder = require('component-builder2');
var component = require('..');
var utils = component.utils;
var log = component.utils.log;
var path = require('path');
var fs = require('fs');
var exists = fs.existsSync || path.existsSync;
var mkdir = require('mkdirp');

// options

program
  .option('-d, --dev', 'build development dependencies')
  .option('-s, --standalone <name>', 'build a stand-alone version of the component')
  .option('-o, --out <dir>', 'output directory defaulting to ./build', 'build')
  .option('-n, --name <file>', 'base name for build files defaulting to build', 'build')
  .option('-p, --prefix <str>', 'prefix css asset urls with <str>')
  .option('-c, --copy', 'copy files instead of linking')
  .option('-u, --use <name>', 'use the given build plugin(s)')
  .option('-R, --no-require', 'exclude require from build')
  .option('-v, --verbose', 'verbose output')

// examples

program.on('--help', function(){
  console.log('  Examples:');
  console.log();
  console.log('    # build to ./build');
  console.log('    $ component build');
  console.log();
  console.log('    # build to ./dist as assets.js, assets.css');
  console.log('    $ component build -o dist -n assets');
  console.log();
  console.log('    # build standalone as window.$');
  console.log('    $ component build --standalone $');
  console.log();
  console.log('    # build with plugins');
  console.log('    $ component build -u foo,bar,baz');
  console.log();
});

// parse argv

program.parse(process.argv);

// component.json required

if (!exists('component.json')) utils.fatal('missing component.json');

// load json

var conf = require(path.resolve('component.json'));

// standalone

var standalone = program.standalone;

// output paths

var jsPath = path.join(program.out, program.name + '.js');
var cssPath = path.join(program.out, program.name + '.css');

// mkdir -p

mkdir.sync(program.out);

// resolve
resolver(process.cwd(), {
  development: program.dev,
  verbose: true,
  install: true
}, function (err, tree) {
  if (err) throw err;

  var branches = flatten(tree);

  // build js
  Builder.scripts(branches, {
    dev: program.dev,
  })
  .use('scripts', Builder.plugins.js())
  .use('json', Builder.plugins.json())
  .use('templates', Builder.plugins.string())
  .toStr(function (err, string) {
    if (err) throw err;

    if (standalone) {
      var umd = [
        'if (typeof exports == "object") {',
        '  module.exports = require("' + conf.name + '");',
        '} else if (typeof define == "function" && define.amd) {',
        '  define([], function(){ return require("' + conf.name + '"); });',
        '} else {',
        '  this["' + name + '"] = require("' + conf.name + '");',
        '}'
      ];

      js += umd.join('\n');
      js += '})();';
    } else {
      // autorequire
      string += '\n\nrequire("' + conf.name + '");';
    }
    fs.writeFile(jsPath, string);
  })

  // build css
  Builder.styles(branches, {
    dev: program.dev
  })
  .use('styles',
    Builder.plugins.css(),
    Builder.plugins.urlRewriter(program.prefix))
  .toStr(function (err, string) {
    if (err) throw err;
    fs.writeFile(cssPath, string);
  })

  // build files
  var fileplugin = program.copy
    ? Builder.plugins.copy()
    : Builder.plugins.symlink();
  Builder.files(branches, {
    dev: program.dev,
    dest: program.out,
  })
  .use('images', fileplugin)
  .use('fonts', fileplugin)
  .use('files', fileplugin);
})
